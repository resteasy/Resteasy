<chapter id="json">
    <title>JSON Support via Jackson</title>
    <para>Besides the Jettision JAXB adapter for JSON, Resteasy also supports integration with the Jackson project.
        Many users find the output from Jackson much nicer than the Badger format or Mapped format provided by Jettison.
        For more on Jackson 2, see <ulink url="http://wiki.fasterxml.com/JacksonHome">http://wiki.fasterxml.com/JacksonHome</ulink>.
        Besides JAXB like APIs, it has a JavaBean based model, described at
        <ulink url="http://wiki.fasterxml.com/JacksonDataBinding">http://wiki.fasterxml.com/JacksonDataBinding</ulink>,
        which allows you to easily marshal Java objects to and from JSON.
        Resteasy integrates with the JavaBean model.
        While Jackson does come with its own JAX-RS integration, Resteasy expanded it a little, as decribed below.
    </para>
    <para>
    <emphasis role="bold">NOTE.</emphasis> The resteasy-jackson-provider module, which is based on the outdated Jackson 1.9.x, is
    currently deprecated, and will be removed in a release subsequent to 3.1.0.Final. The resteasy-jackson2-provider
    module is based on Jackson 2. 
    </para>
    
    <sect1>
        <title>Using Jackson 1.9.x Outside of Wildfly</title>
        <para>If you're deploying Resteasy outside of Wildfly,
        add the Resteasy Jackson provder to your WAR pom.xml build:</para>
        <programlisting><![CDATA[
<dependency>
   <groupId>org.jboss.resteasy</groupId>
   <artifactId>resteasy-jackson-provider</artifactId>
   <version>${version.resteasy}</version>
</dependency>
]]></programlisting>
    </sect1>
    <sect1>
        <title>Using Jackson 1.9.x Inside Wildfly 8</title>
        <para>If you're deploying Resteasy with Wildfly 8,
        there's nothing you need to do except to make sure
        you've updated your installation with the latest and greatest Resteasy.  See the
        <link linkend='Installation_Configuration'>Installation/Configuration</link> section
        of this documentation for more details.</para>
    </sect1>
    <sect1>
        <title>Using Jackson 2 Outside of Wildfly</title>
        <para>If you're deploying Resteasy outside of Wildfly,
        add the Resteasy Jackson provder to your WAR pom.xml build:</para>
        <programlisting><![CDATA[
<dependency>
   <groupId>org.jboss.resteasy</groupId>
   <artifactId>resteasy-jackson2-provider</artifactId>
   <version>${version.resteasy}</version>
</dependency>
]]></programlisting>
    </sect1>
    <sect1>
        <title>Using Jackson 2 Inside Wildfly 9 and above</title>
        <para>If you're deploying Resteasy with Wildfly 9 or above,
        there's nothing you need to do except to make sure
        you've updated your installation with the latest and greatest Resteasy.  See the
        <link linkend='Installation_Configuration'>Installation/Configuration</link> section
        of this documentation for more details.</para>
    </sect1>
    <sect1>
        <title>Additional Resteasy Specifics</title>

    <para>The first extra piece that Resteasy added to the integration was
        to support "application/*+json". Jackson would only accept "application/json" and "text/json" as valid
        media types. This allows you to create json-based media types and still
        let Jackson marshal things for you. For example:
    </para>
    <programlisting><![CDATA[
@Path("/customers")
public class MyService {

    @GET
    @Produces("application/vnd.customer+json")
    public Customer[] getCustomers() {}
}
]]></programlisting>
    <para>Another problem that occurs is when you are using the Resteasy JAXB providers alongside Jackson.
        You may want to use Jettison and JAXB to output your JSON instead of Jackson. In this case, you must
        either not install the Jackson provider, or use the annotation
        @org.jboss.resteasy.annotations.providers.NoJackson
        on your JAXB annotated classes. For example:
    </para>
    <programlisting><![CDATA[
@XmlRootElement
@NoJackson
public class Customer {...}

@Path("/customers")
public class MyService {

    @GET
    @Produces("application/vnd.customer+json")
    public Customer[] getCustomers() {}
}
]]></programlisting>
    <para>
        If you can't annotate the JAXB class with @NoJackson, then you can
        use the annotation on a method parameter. For example:
    </para>
    <programlisting><![CDATA[
@XmlRootElement
public class Customer {...}

@Path("/customers")
public class MyService {

    @GET
    @Produces("application/vnd.customer+json")
    @NoJackson
    public Customer[] getCustomers() {}

    @POST
    @Consumes("application/vnd.customer+json")
    public void createCustomer(@NoJackson Customer[] customers) {...}
}
]]></programlisting>
    </sect1>
    <sect1 id="Possible_Jackson_Problems">
        <title>Possible Conflict With JAXB Provider</title>
        <para>
            If your Jackson classes are annotated with JAXB annotations and you have the resteasy-jaxb-provider in your
            classpath, you may trigger the Jettision JAXB marshalling code. To turn off the JAXB json marshaller
            use the @org.jboss.resteasy.annotations.providers.jaxb.IgnoreMediaTypes("application/*+json") on your
            classes.
        </para>
    </sect1>
    <sect1 id="JSONP_Support">
        <title>JSONP Support</title>
        <para>
            If you're using Jackson, Resteasy has <ulink url="http://en.wikipedia.org/wiki/JSONP">JSONP</ulink> that you can turn on by adding
            the provider <literal>org.jboss.resteasy.plugins.providers.jackson.JacksonJsonpInterceptor</literal> (Jackson2JsonpInterceptor if you're using the Jackson2 provider)
            to your deployments.
            If the media type of the response is json and a callback query parameter is given, the response will be a javascript snippet with
            a method call of the method defined by the callback parameter.
            For example:
<programlisting>
GET /resources/stuff?callback=processStuffResponse
</programlisting>
            will produce this response:
<programlisting>
processStuffResponse(&lt;nomal JSON body&gt;)
</programlisting>
            This supports the default behavior of <ulink url="http://api.jquery.com/jQuery.ajax/">jQuery</ulink>.
            To enable JacksonJsonpInterceptor in WildFly, you need to import annotations from <literal>org.jboss.resteasy.resteasy-jackson-provider</literal> module using jboss-deployment-structure.xml:
<programlisting><![CDATA[
<jboss-deployment-structure>
  <deployment>
    <dependencies>
      <module name="org.jboss.resteasy.resteasy-jackson-provider" annotations="true"/>
    </dependencies>
  </deployment>
</jboss-deployment-structure>
]]></programlisting>
        </para>
        <para>
            You can change the name of the callback parameter by setting the callbackQueryParameter property.
        </para>
        <para>
            JacksonJsonpInterceptor can wrap the response into a try-catch block:
<programlisting>
try{processStuffResponse(&lt;normal JSON body&gt;)}catch(e){}
</programlisting>
            You can enable this feature by setting the resteasy.jsonp.silent property to true
        </para>
        <para>
        <emphasis role="bold">Note.</emphasis> Because JSONP can be used in 
        <emphasis role="bold">Cross Site Scripting Inclusion (XSSI) attacks</emphasis>,
        <methodname>Jackson2JsonpInterceptor</methodname>
        is disabled by default. Two steps are necessary to enable it:
        </para>
        <orderedlist>
           <listitem>As noted above, <methodname>Jackson2JsonpInterceptor</methodname> must be
           included in the deployment. For example,
           a service file META-INF/services/javax.ws.rs.ext.Providers with the line
<programlisting>
org.jboss.resteasy.plugins.providers.jackson.Jackson2JsonpInterceptor
</programlisting>
           may be included on the classpath
           </listitem>
           <listitem>Also, the servlet context parameter parameter "resteasy.jsonp.enable" must be set to "true".
           </listitem>
        </orderedlist>
    </sect1>
    <sect1 id="Jackson_JSON_Decorator">
        <title>Jackson JSON Decorator</title>
        <para>
            If you are using the Jackson 2 provider, Resteasy has provided a pretty-printing annotation simliar with the one in JAXB provider:
<programlisting>
org.jboss.resteasy.annotations.providers.jackson.Formatted
</programlisting>
            Here is an example:
<programlisting>
@GET
@Produces("application/json")
@Path("/formatted/{id}")
@Formatted
public Product getFormattedProduct()
{
    return new Product(333, "robot");
}
</programlisting>
            As the example shown above, the @Formatted annotation will enable the underlying Jackson option "SerializationFeature.INDENT_OUTPUT".
        </para>
    </sect1>
</chapter>
